basePath: /api
definitions:
  domain.OrderProduct:
    properties:
      product_id:
        type: string
      quantity:
        type: integer
    type: object
  dtos.AddressDTO:
    properties:
      city:
        example: Los Angeles
        maxLength: 30
        type: string
      country:
        example: USA
        maxLength: 30
        type: string
      created_at:
        example: 1674405183
        type: integer
      id:
        example: 8ded83fe-93c8-11ed-ab0f-d8bbc1a27048
        type: string
      line1:
        example: Lolipop
        maxLength: 20
        type: string
      line2:
        example: Wolfstreet
        maxLength: 20
        type: string
      name:
        example: main card
        maxLength: 20
        type: string
      postal_code:
        example: "24156"
        type: string
      state:
        example: California
        maxLength: 40
        type: string
      updated_at:
        example: 1674405181
        type: integer
    required:
    - city
    - country
    - line1
    - name
    - postal_code
    - state
    type: object
  dtos.AddressRespOKDTO:
    properties:
      data:
        $ref: '#/definitions/dtos.AddressDTO'
      message:
        example: Data retrived!
        type: string
      status:
        example: success
        type: string
    type: object
  dtos.AddressesRespOKDTO:
    properties:
      data:
        items:
          $ref: '#/definitions/dtos.AddressDTO'
        type: array
      message:
        example: Data retrived!
        type: string
      status:
        example: success
        type: string
    type: object
  dtos.AuthRespErrDTO:
    properties:
      detail:
        example: the token is expired
        type: string
      message:
        example: invalid access token
        type: string
      status:
        example: failure
        type: string
    type: object
  dtos.CardDTO:
    properties:
      brand:
        example: visa
        type: string
      country:
        example: USA
        type: string
      created_at:
        example: 1674405183
        type: integer
      exp_month:
        example: 11
        type: integer
      exp_year:
        example: 2025
        type: integer
      id:
        example: 8ded83fe-93c8-11ed-ab0f-d8bbc1a27048
        type: string
      last4:
        example: "1429"
        type: string
      name:
        example: Main card
        type: string
      payment_id:
        example: pm_1NKPiEG8UXDxPRbaEDuh6BrU
        type: string
      updated_at:
        example: 1674405181
        type: integer
    type: object
  dtos.CardsRespOKDTO:
    properties:
      data:
        items:
          $ref: '#/definitions/dtos.CardDTO'
        type: array
      message:
        example: Data retrived!
        type: string
      status:
        example: success
        type: string
    type: object
  dtos.CategoriesRespOKDTO:
    properties:
      data:
        items:
          $ref: '#/definitions/dtos.CategoryDTO'
        type: array
      message:
        example: Data retrived!
        type: string
      status:
        example: success
        type: string
    type: object
  dtos.CategoryDTO:
    properties:
      created_at:
        example: 1674405183
        type: integer
      id:
        example: 8ded83fe-93c8-11ed-ab0f-d8bbc1a27048
        type: string
      name:
        example: clothes
        maxLength: 15
        type: string
      updated_at:
        example: 1674405181
        type: integer
    required:
    - name
    type: object
  dtos.CategoryRespOKDTO:
    properties:
      data:
        $ref: '#/definitions/dtos.CategoryDTO'
      message:
        example: Data retrived!
        type: string
      status:
        example: success
        type: string
    type: object
  dtos.DetailRespErrDTO:
    properties:
      detail:
        example: error querying the database
        type: string
      message:
        example: something went wrong
        type: string
      status:
        example: failure
        type: string
    type: object
  dtos.NewAddressDTO:
    properties:
      city:
        example: Los Angeles
        maxLength: 30
        type: string
      country:
        example: USA
        maxLength: 30
        type: string
      line1:
        example: Lolipop
        maxLength: 20
        type: string
      line2:
        example: Wolfstreet
        maxLength: 20
        type: string
      name:
        example: main card
        maxLength: 20
        type: string
      postal_code:
        example: "24156"
        type: string
      state:
        example: California
        maxLength: 40
        type: string
    required:
    - city
    - country
    - line1
    - name
    - postal_code
    - state
    type: object
  dtos.NewCategoryDTO:
    properties:
      name:
        example: clothes
        maxLength: 15
        type: string
    required:
    - name
    type: object
  dtos.NewOrderDTO:
    properties:
      address_id:
        example: 8ded83fe-93c8-11ed-ab0f-d8bbc1a27048
        type: string
      payment_id:
        example: pm_1NKPiEG8UXDxPRbaEDuh6BrU
        type: string
      products:
        items:
          $ref: '#/definitions/domain.OrderProduct'
        type: array
    required:
    - address_id
    - payment_id
    - products
    type: object
  dtos.NewProductDTO:
    properties:
      avalible:
        type: boolean
      category:
        example: clothes
        type: string
      description:
        example: The best T-shirt in the world.
        maxLength: 200
        minLength: 4
        type: string
      discount_rate:
        example: 23
        maximum: 100
        minimum: 0
        type: integer
      images_url:
        example:
        - https://example.com/image1.png
        - https://example.com/image2.png
        items:
          type: string
        maxItems: 10
        minItems: 1
        type: array
      name:
        example: Black T-Shirt Addidas
        maxLength: 50
        minLength: 4
        type: string
      price:
        example: 2599
        minimum: 0
        type: integer
      tags:
        example:
        - t-shirts
        - clothes
        - addidas
        items:
          type: string
        maxItems: 6
        type: array
    required:
    - description
    - images_url
    - name
    - price
    - tags
    type: object
  dtos.NewUserDTO:
    properties:
      age:
        example: 20
        minimum: 15
        type: integer
      email:
        example: john@gmail.com
        type: string
      image_url:
        example: https://nwdistrict.ifas.ufl.edu/nat/files/2021/01/Groundhog.jpg
        type: string
      password:
        example: password123
        minLength: 8
        type: string
      role:
        enum:
        - user
        - moderator
        example: user
        type: string
      username:
        example: John Doe
        maxLength: 15
        minLength: 4
        type: string
      verified_email:
        example: false
        type: boolean
    required:
    - age
    - email
    - password
    - username
    type: object
  dtos.OrderDTO:
    properties:
      address_id:
        example: 8ded83fe-93c8-11ed-ab0f-d8bbc1a27048
        type: string
      amount:
        example: 14500
        type: integer
      created_at:
        example: 1674405183
        type: integer
      id:
        example: 8ded83fe-93c8-11ed-ab0f-d8bbc1a27048
        type: string
      paid:
        example: true
        type: boolean
      payment_id:
        example: pm_1NKPiEG8UXDxPRbaEDuh6BrU
        type: string
      products:
        items:
          $ref: '#/definitions/domain.OrderProduct'
        type: array
      status:
        example: pending
        type: string
      updated_at:
        example: 1674405181
        type: integer
    required:
    - address_id
    - payment_id
    - products
    type: object
  dtos.OrderRespOKDTO:
    properties:
      data:
        $ref: '#/definitions/dtos.OrderDTO'
      message:
        example: Data retrived!
        type: string
      status:
        example: success
        type: string
    type: object
  dtos.OrdersRespOKDTO:
    properties:
      data:
        items:
          $ref: '#/definitions/dtos.OrderDTO'
        type: array
      message:
        example: Data retrived!
        type: string
      status:
        example: success
        type: string
    type: object
  dtos.ProductDTO:
    properties:
      avalible:
        type: boolean
      category:
        example: clothes
        type: string
      created_at:
        example: 1674405183
        type: integer
      description:
        example: The best T-shirt in the world.
        maxLength: 200
        minLength: 4
        type: string
      discount_rate:
        example: 23
        maximum: 100
        minimum: 0
        type: integer
      id:
        example: 8ded83fe-93c8-11ed-ab0f-d8bbc1a27048
        type: string
      images_url:
        example:
        - https://example.com/image1.png
        - https://example.com/image2.png
        items:
          type: string
        maxItems: 10
        minItems: 1
        type: array
      name:
        example: Black T-Shirt Addidas
        maxLength: 50
        minLength: 4
        type: string
      price:
        example: 2599
        minimum: 0
        type: integer
      tags:
        example:
        - t-shirts
        - clothes
        - addidas
        items:
          type: string
        maxItems: 6
        type: array
      updated_at:
        example: 1674405181
        type: integer
    required:
    - description
    - images_url
    - name
    - price
    - tags
    type: object
  dtos.ProductRespOKDTO:
    properties:
      data:
        $ref: '#/definitions/dtos.ProductDTO'
      message:
        example: Data retrived!
        type: string
      status:
        example: success
        type: string
    type: object
  dtos.ProductsRespOKDTO:
    properties:
      data:
        items:
          $ref: '#/definitions/dtos.ProductDTO'
        type: array
      message:
        example: Data retrived!
        type: string
      status:
        example: success
        type: string
    type: object
  dtos.RespErrDTO:
    properties:
      message:
        example: something went wrong
        type: string
      status:
        example: failure
        type: string
    type: object
  dtos.RespOKDTO:
    properties:
      message:
        example: Data retrived!
        type: string
      status:
        example: success
        type: string
    type: object
  dtos.SaveCardDTO:
    properties:
      payment_id:
        example: pm_1NKPiEG8UXDxPRbaEDuh6BrU
        type: string
    required:
    - payment_id
    type: object
  dtos.SignInRespOKDTO:
    properties:
      data:
        properties:
          access_token:
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
            type: string
          refresh_token:
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxNDE0NTYzNiIsIm5hbWUiOiJKb2huIERvZSIsImlhdCI6MTUxNjIzOTAyMn0.Bl1Rpmk-BrbqtgJA6F9pTAuiOlaPLpdDQ7MJvZ7URSU
            type: string
          user:
            $ref: '#/definitions/dtos.UserDTO'
        type: object
      message:
        example: Data retrived!
        type: string
      status:
        example: success
        type: string
    type: object
  dtos.SigninDTO:
    properties:
      email:
        example: zaph@fapi.com
        type: string
      password:
        example: menosfapi33
        type: string
    required:
    - email
    - password
    type: object
  dtos.SignupDTO:
    properties:
      age:
        example: 18
        minimum: 15
        type: integer
      email:
        example: john@gmain.com
        type: string
      password:
        example: password
        minLength: 8
        type: string
      username:
        example: John doe
        maxLength: 15
        minLength: 4
        type: string
    required:
    - age
    - email
    - password
    - username
    type: object
  dtos.TokenRespOKDTO:
    properties:
      data:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      message:
        example: Data retrived!
        type: string
      status:
        example: success
        type: string
    type: object
  dtos.URLRespOKDTO:
    properties:
      data:
        example: https://google.com/oauth/pulse
        type: string
      message:
        example: Data retrived!
        type: string
      status:
        example: success
        type: string
    type: object
  dtos.UpdateAddressDTO:
    properties:
      city:
        example: Los Angeles
        maxLength: 30
        type: string
      country:
        example: USA
        maxLength: 30
        type: string
      line1:
        example: Lolipop
        maxLength: 20
        type: string
      line2:
        example: Wolfstreet
        maxLength: 20
        type: string
      name:
        example: main card
        maxLength: 20
        type: string
      postal_code:
        example: "24156"
        type: string
      state:
        example: California
        maxLength: 40
        type: string
    type: object
  dtos.UpdateProductDTO:
    properties:
      available:
        type: boolean
      category:
        example: clothes
        type: string
      description:
        example: The best T-shirt in the world.
        maxLength: 200
        minLength: 4
        type: string
      discount_rate:
        example: 23
        maximum: 100
        minimum: 0
        type: integer
      images_url:
        example:
        - https://example.com/image1.png
        - https://example.com/image2.png
        items:
          type: string
        maxItems: 10
        minItems: 1
        type: array
      name:
        example: Black T-Shirt Addidas
        maxLength: 50
        minLength: 4
        type: string
      price:
        example: 2599
        minimum: 0
        type: integer
      tags:
        example:
        - t-shirts
        - clothes
        - addidas
        items:
          type: string
        maxItems: 6
        type: array
    type: object
  dtos.UpdateUserDTO:
    properties:
      age:
        example: 20
        minimum: 15
        type: integer
      image_url:
        example: https://nwdistrict.ifas.ufl.edu/nat/files/2021/01/Groundhog.jpg
        type: string
      role:
        enum:
        - user
        - moderator
        example: user
        type: string
      username:
        example: John Doe
        maxLength: 15
        minLength: 4
        type: string
      verified_email:
        type: boolean
    type: object
  dtos.UserDTO:
    properties:
      age:
        example: 20
        minimum: 15
        type: integer
      created_at:
        example: 1674405183
        type: integer
      customer_id:
        type: string
      email:
        example: john@gmail.com
        type: string
      id:
        example: 8ded83fe-93c8-11ed-ab0f-d8bbc1a27048
        type: string
      image_url:
        example: https://nwdistrict.ifas.ufl.edu/nat/files/2021/01/Groundhog.jpg
        type: string
      password:
        example: password123
        minLength: 8
        type: string
      role:
        enum:
        - user
        - moderator
        example: user
        type: string
      updated_at:
        example: 1674405181
        type: integer
      username:
        example: John Doe
        maxLength: 15
        minLength: 4
        type: string
      verified_email:
        example: false
        type: boolean
    required:
    - age
    - email
    - password
    - username
    type: object
  dtos.UserRespOKDTO:
    properties:
      data:
        $ref: '#/definitions/dtos.UserDTO'
      message:
        example: Data retrived!
        type: string
      status:
        example: success
        type: string
    type: object
  dtos.UsersRespOKDTO:
    properties:
      data:
        items:
          $ref: '#/definitions/dtos.UserDTO'
        type: array
      message:
        example: Data retrived!
        type: string
      status:
        example: success
        type: string
    type: object
  dtos.ValidationRespErrDTO:
    properties:
      errors:
        items:
          properties:
            field:
              example: Email
              type: string
            message:
              example: invalid email
              type: string
          type: object
        type: array
      message:
        example: one or more field are invalid
        type: string
      status:
        example: failure
        type: string
    type: object
host: localhost:9000
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: This is a sample swagger for Fiber
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiber Example API
  version: "1.0"
paths:
  /address/create:
    post:
      consumes:
      - application/json
      description: Create address
      parameters:
      - description: address data
        in: body
        name: address_data
        required: true
        schema:
          $ref: '#/definitions/dtos.NewAddressDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.AddressRespOKDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ValidationRespErrDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.AuthRespErrDTO'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      security:
      - BearerAuth: []
      summary: Create new address
      tags:
      - address
  /address/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete address
      parameters:
      - description: address  uuid
        example: 3afc3021-9395-11ed-a8b6-d8bbc1a27045
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.RespOKDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.AuthRespErrDTO'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      security:
      - BearerAuth: []
      summary: Delete address
      tags:
      - address
  /address/list:
    get:
      consumes:
      - application/json
      description: Get all addresses from auth user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.AddressesRespOKDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.AuthRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      security:
      - BearerAuth: []
      summary: Get auth user addresses
      tags:
      - address
  /address/update/{id}:
    put:
      consumes:
      - application/json
      description: Update address
      parameters:
      - description: address  uuid
        example: 3afc3021-9395-11ed-a8b6-d8bbc1a27045
        in: path
        name: id
        required: true
        type: string
      - description: address data
        in: body
        name: address_data
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateAddressDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.AddressRespOKDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ValidationRespErrDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.AuthRespErrDTO'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/dtos.RespErrDTO'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      security:
      - BearerAuth: []
      summary: Update address
      tags:
      - address
  /auth/{provider}/callback:
    get:
      consumes:
      - application/json
      description: Sing in by OAuth provider (google/github/discord)
      parameters:
      - description: OAuth code
        in: query
        name: code
        required: true
        type: string
      - description: OAuth provider
        enum:
        - google
        - discord
        - github
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.SignInRespOKDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.RespErrDTO'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      summary: Sign in OAuth
      tags:
      - auth
  /auth/{provider}/url:
    get:
      consumes:
      - application/json
      description: Get OAuth url from provider (google/github/discord)
      parameters:
      - description: OAuth provider
        enum:
        - google
        - discord
        - github
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.URLRespOKDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      summary: Get OAuth url
      tags:
      - auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get the current authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserRespOKDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.AuthRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.RespErrDTO'
      security:
      - BearerAuth: []
      summary: Get auth user
      tags:
      - auth
  /auth/refresh:
    get:
      consumes:
      - application/json
      description: Refresh access token
      parameters:
      - description: Send refresh token method
        in: query
        name: method
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.TokenRespOKDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.RespErrDTO'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      summary: Refresh token
      tags:
      - auth
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: Sign in user
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dtos.SigninDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.SignInRespOKDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ValidationRespErrDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.RespErrDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.RespErrDTO'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      summary: Sign in
      tags:
      - auth
  /auth/signout:
    get:
      description: Logout user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.RespOKDTO'
      summary: Sign out
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Register new user
      parameters:
      - description: Sign up user
        in: body
        name: user_data
        required: true
        schema:
          $ref: '#/definitions/dtos.SignupDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.UserRespOKDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ValidationRespErrDTO'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      summary: Sign up
      tags:
      - auth
  /card/list:
    delete:
      consumes:
      - application/json
      description: Remove a card from user acount
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.CardsRespOKDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.AuthRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      security:
      - BearerAuth: []
      summary: Remove card
      tags:
      - card
    get:
      consumes:
      - application/json
      description: Get all cards from auth user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.CardsRespOKDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.AuthRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      security:
      - BearerAuth: []
      summary: Get auth user cards
      tags:
      - card
  /card/save:
    post:
      consumes:
      - application/json
      description: Save card to user acount
      parameters:
      - description: card data
        in: body
        name: card_data
        required: true
        schema:
          $ref: '#/definitions/dtos.SaveCardDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.CardsRespOKDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.AuthRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      security:
      - BearerAuth: []
      summary: Save card
      tags:
      - card
  /category/all:
    get:
      consumes:
      - application/json
      description: Get all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.CategoriesRespOKDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      summary: Get categories
      tags:
      - category
  /category/create:
    post:
      consumes:
      - application/json
      description: Create category
      parameters:
      - description: category data
        in: body
        name: category_data
        required: true
        schema:
          $ref: '#/definitions/dtos.NewCategoryDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.CategoryRespOKDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ValidationRespErrDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.AuthRespErrDTO'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/dtos.RespErrDTO'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      security:
      - BearerAuth: []
      summary: Create new category
      tags:
      - category
  /category/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete category
      parameters:
      - description: category uuid
        example: 3afc3021-9395-11ed-a8b6-d8bbc1a27045
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.RespOKDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.RespErrDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.AuthRespErrDTO'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      security:
      - BearerAuth: []
      summary: Delete category
      tags:
      - category
  /order/list:
    get:
      consumes:
      - application/json
      description: Get all orders from auth user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OrdersRespOKDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.AuthRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      security:
      - BearerAuth: []
      summary: Get auth user orders
      tags:
      - order
  /order/new:
    post:
      consumes:
      - application/json
      description: Create order
      parameters:
      - description: order data
        in: body
        name: order_data
        required: true
        schema:
          $ref: '#/definitions/dtos.NewOrderDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.OrderRespOKDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ValidationRespErrDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.AuthRespErrDTO'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/dtos.RespErrDTO'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      security:
      - BearerAuth: []
      summary: Create new order
      tags:
      - order
  /product/all:
    get:
      consumes:
      - application/json
      description: Get all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ProductsRespOKDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      summary: Get products
      tags:
      - product
  /product/create:
    post:
      consumes:
      - application/json
      description: Create product
      parameters:
      - description: product data
        in: body
        name: product_data
        required: true
        schema:
          $ref: '#/definitions/dtos.NewProductDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.ProductRespOKDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ValidationRespErrDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.AuthRespErrDTO'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/dtos.RespErrDTO'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      security:
      - BearerAuth: []
      summary: Create new product
      tags:
      - product
  /product/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete product
      parameters:
      - description: product   uuid
        example: 3afc3021-9395-11ed-a8b6-d8bbc1a27045
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.RespOKDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.AuthRespErrDTO'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      security:
      - BearerAuth: []
      summary: Delete product
      tags:
      - product
  /product/get/{id}:
    get:
      consumes:
      - application/json
      description: Get product by id
      parameters:
      - description: product   uuid
        example: 3afc3021-9395-11ed-a8b6-d8bbc1a27045
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ProductRespOKDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.RespErrDTO'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      summary: Get product
      tags:
      - product
  /product/update/{id}:
    put:
      consumes:
      - application/json
      description: Update product
      parameters:
      - description: product   uuid
        example: 3afc3021-9395-11ed-a8b6-d8bbc1a27045
        in: path
        name: id
        required: true
        type: string
      - description: product data
        in: body
        name: product_data
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateProductDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.RespOKDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ValidationRespErrDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.AuthRespErrDTO'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/dtos.RespErrDTO'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      security:
      - BearerAuth: []
      summary: Update product
      tags:
      - product
  /user/all:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UsersRespOKDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      security:
      - BearerAuth: []
      summary: Get users
      tags:
      - user
  /user/create:
    post:
      consumes:
      - application/json
      description: Create new user
      parameters:
      - description: user data
        in: body
        name: user_data
        required: true
        schema:
          $ref: '#/definitions/dtos.NewUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.UserRespOKDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ValidationRespErrDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.AuthRespErrDTO'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      security:
      - BearerAuth: []
      summary: Create user
      tags:
      - user
  /user/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user by ID
      parameters:
      - description: user uuid
        example: 3afc3021-9395-11ed-a8b6-d8bbc1a27045
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserRespOKDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.AuthRespErrDTO'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/dtos.RespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - user
  /user/get/{id}:
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: user uuid
        example: 3afc3021-9395-11ed-a8b6-d8bbc1a27045
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "302":
          description: Found
          schema:
            $ref: '#/definitions/dtos.UserRespOKDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.RespErrDTO'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/dtos.RespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      security:
      - BearerAuth: []
      summary: Get user
      tags:
      - user
  /user/update/{id}:
    put:
      consumes:
      - application/json
      description: Upadate existing user
      parameters:
      - description: user uuid
        example: 3afc3021-9395-11ed-a8b6-d8bbc1a27045
        in: path
        name: id
        required: true
        type: string
      - description: user data
        in: body
        name: user_data
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserRespOKDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ValidationRespErrDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.AuthRespErrDTO'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/dtos.RespErrDTO'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.DetailRespErrDTO'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: X-Access-Token
    type: apiKey
swagger: "2.0"
